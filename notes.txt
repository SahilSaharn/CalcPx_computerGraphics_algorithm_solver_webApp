                              [what learn't] : 
-> how to create a custom html reu-usable component in vanilla js and html ,  by extending the HTMLElement class and then defining in [customElements.define('your-component-using-name' , your-comsponent-class)]
 example : 
 (creation)
 class Navbar extends HTMLElement {
  constructor(){
    super()
    this.innerHTML = 'your html markup of the component'
  }
}

(usage) :
customElements.define("nav-bar", Navbar) to use it import js file in the html file and use it by the tag name you defined in this case its <nav-bar></nav-bar> note: always add a ending tag

-> how to make it dynamic 
-> and how to push code to a repository 


                                PROBLEMS

[Problem : 1]

sometimes our custom components have tough time styling coz tailwind scan the document and then add the styling and it done ,

but i  case of custom components which we have created using javascript thier  defined markup is added later and not scanned and ,hence not scanned so no  styling so always ,
 - add your custom components .js file to tailwind config file so it can scan its markup and generate styles for it 


[Problem : 2]
i have to click button two times to trigger onclick function in htm
,Why do my buttons have to be clicked twice to run the function
,The first time a button is clicked it has to be clicked twice to active, but then it works on a single click.

[solution]
If you read element.style via JS it will only include the style properties that are set on the element's actual style attribute. Your first click reads the style for "display" which is "" and thus sets it to "none". The next click reads the current "display" value (currently "none") and then inverts it to "block".

You can either set the elements style prop to "display:none", or you can invert your JS Logic, like so:

function myFunction(divid) { 
    var x = document.getElementById(divid);
    if (x.style.display == 'block') {
        x.style.display = 'none';
    } else {
        x.style.display = 'block';
    }
}

...